import streamlit as st
from dotenv import load_dotenv
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings, HuggingFaceInstructEmbeddings
from langchain.vectorstores import FAISS
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from htmlTemplates import css, bot_template, user_template
from langchain.llms import HuggingFaceHub
from langchain.schema.output_parser import StrOutputParser
from langchain_community.chat_models import ChatMaritalk
from ragas import evaluate
from ragas.metrics import  faithfulness, answer_relevancy, context_precision, context_recall, answer_similarity, answer_correctness
from datasets import Dataset 
import locale
#import evaluate
import pandas as pd



def get_pdf_text(pdf_docs):
    text = ""
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text


def get_text_chunks(text):
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)
    return chunks


def get_vectorstore(text_chunks):
    embeddings = OpenAIEmbeddings(model='text-embedding-3-large')
    #gpt-3.5-turbo-0125
    # embeddings = HuggingFaceInstructEmbeddings(model_name="hkunlp/instructor-xl")
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings )
    return vectorstore


def get_conversation_chain(vectorstore):
    # llm = ChatOpenAI(temperature=0)
    llm = ChatOpenAI(model='gpt-3.5-turbo-0125' , temperature=0)
    # llm = HuggingFaceHub(repo_id="NexaAIDev/Octopus-v2", model_kwargs={"temperature":0.0, "max_new_tokens":250})
#     llm = ChatMaritalk(
#     model="sabia-2-medium",  # Available models: sabia-2-small and sabia-2-medium
#     api_key="106360418574866720591$a22683aa2529c86b",  # Insert your API key here
#     temperature=0.1,
#     max_tokens=300,
# )

    memory = ConversationBufferMemory(
        memory_key='chat_history', return_messages=True)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        retriever=vectorstore.as_retriever(),
        memory=memory
    )
    return conversation_chain


def handle_userinput(user_question):
    response = st.session_state.conversation({'question': user_question})
    st.session_state.chat_history = response['chat_history']

    for i, message in enumerate(st.session_state.chat_history):
        if i % 2 == 0:
            st.write(user_template.replace(
                "{{MSG}}", message.content), unsafe_allow_html=True)
        else:
            st.write(bot_template.replace(
                "{{MSG}}", message.content), unsafe_allow_html=True)


def main():
    load_dotenv()
    
    st.set_page_config(page_title="TowerAi",
                       page_icon="ü§ñ")
    st.write(css, unsafe_allow_html=True)

    if "conversation" not in st.session_state:
        st.session_state.conversation = None
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = None
    


# Detecta o idioma preferido do sistema
    idioma_preferido = locale.getdefaultlocale()[0]

# Determina o idioma inicial para o radio com base no idioma do sistema
    idioma_inicial = "EN" if idioma_preferido.startswith('en') else "PT-BR"

# Op√ß√µes de idioma para o usu√°rio escolher
    opcoes_de_idioma = ['EN', 'PT-BR']
    

    
    with st.sidebar:
        
        st.subheader("üåê :violet[*Idiomas*]")
        idioma_selecionado = st.radio(
        "Escolha o idioma do TowerAi:",
        options=opcoes_de_idioma,
        index=opcoes_de_idioma.index(idioma_inicial)
        )
        st.divider()
        if idioma_selecionado == 'EN':
            st.subheader("üìù :violet[*Documents*]")
            pdf_docs = st.file_uploader(
                    "Upload your PDFs here and click on  :violet['Process'].", accept_multiple_files=True, type="pdf")
            if st.button("Process", type="primary"):
                with st.spinner("Processing"):
                    # get pdf text
                    raw_text = get_pdf_text(pdf_docs)

                    # get the text chunks
                    text_chunks = get_text_chunks(raw_text)

                    # create vector store
                    vectorstore, vectors = get_vectorstore(text_chunks)

                    # create conversation chain
                    st.session_state.conversation = get_conversation_chain(
                        vectorstore)
            st.divider()
            st.subheader("üí° :violet[*Guide*]")
            st.text("1Ô∏è‚É£ Do this")
            st.text("2Ô∏è‚É£ Do this")
            st.text("3Ô∏è‚É£ Do this")
            st.text("4Ô∏è‚É£ Do this")

            
        else:
            st.subheader("üìù :violet[*Documentos*]")
            pdf_docs = st.file_uploader(
                    "Carregue seus PDFs aqui e clique em  :violet['Processar'].", accept_multiple_files=True, type="pdf")
            if st.button("Processar", type="primary"):
                with st.spinner("Processando..."):
                    # get pdf text
                    raw_text = get_pdf_text(pdf_docs)

                    # get the text chunks
                    text_chunks = get_text_chunks(raw_text)

                    # create vector store
                    vectorstore = get_vectorstore(text_chunks)

                    # create conversation chain
                    st.session_state.conversation = get_conversation_chain(
                        vectorstore)
                st.success('This is a success message!', icon="‚úÖ")
            else: 
                st.warning('This is a warning', icon="‚ö†Ô∏è")
            st.divider()
            st.subheader("üí° :violet[*Guia*]")
            st.text("1Ô∏è‚É£ Escolha o Idioma")
            st.text("2Ô∏è‚É£ Carregue o(s) PDF(s)")
            st.text("3Ô∏è‚É£ Clique em Processar")
            st.text("4Ô∏è‚É£ Fa√ßa Perguntas ao TowerAi")
            
    if idioma_selecionado == 'EN':        
        st.header("Welcome to :violet[*TowerAi*] ü§ñ")
        st.write("Your company's chat to ask questions about private documents! üìù")
        user_question = st.text_input("Ask questions about the documents you uploaded:")
        if user_question:
            handle_userinput(user_question)
    else:
        st.header("Bem Vindo ao :violet[*TowerAi*] ü§ñ")
        st.write("O chat da sua empresa para tirar d√∫vidas sobre documentos particulares! üìù")
        user_question = st.text_input("Fa√ßa perguntas sobre os documentos que voc√™ carregou:")
        if user_question:
            handle_userinput(user_question)
            
    data_samples = {
    'question': [
        "Qual √© o documento que regula a situa√ß√£o, obriga√ß√µes, deveres, direitos e prerrogativas dos membros das For√ßas Armadas do Brasil?",
        "Quem tem a autoridade suprema sobre as For√ßas Armadas brasileiras, segundo o Estatuto dos Militares?",
        "O que caracteriza a carreira militar, conforme definido no Estatuto dos Militares?"
    ],
    'answer': [
        "O documento que regula a situa√ß√£o, obriga√ß√µes, deveres, direitos e prerrogativas dos membros das For√ßas Armadas do Brasil √© a Lei no 6.880, de 9 de dezembro de 1980, conhecida como o Estatuto dos Militares. Este estatuto estabelece as bases legais sobre as quais se apoiam os direitos, os deveres e as obriga√ß√µes dos militares em servi√ßo ativo, na reserva ou reformados.",
        "De acordo com o Estatuto dos Militares, a autoridade suprema sobre as For√ßas Armadas brasileiras √© o Presidente da Rep√∫blica. Isso est√° estabelecido no Art. 3¬∞, que afirma que as For√ßas Armadas s√£o institui√ß√µes nacionais, permanentes e regulares, organizadas com base na hierarquia e na disciplina, sob a autoridade suprema do Presidente da Rep√∫blica e dentro dos limites da lei.",
        "De acordo com o Estatuto dos Militares, a carreira militar √© caracterizada por atividade continuada e inteiramente devotada √†s finalidades prec√≠puas das For√ßas Armadas, denominada atividade militar. A carreira militar √© privativa do pessoal da ativa, inicia-se com o ingresso nas For√ßas Armadas e obedece √†s diversas sequ√™ncias de graus hier√°rquicos. Al√©m disso, s√£o privativas de brasileiro nato as carreiras de oficial da Marinha, do Ex√©rcito e da Aeron√°utica."
    ],
    'contexts': [
        ["O Estatuto dos Militares √© estabelecido pela Lei N¬∫ 6.880, de 9 de Dezembro de 1980. Este documento √© fundamental para a organiza√ß√£o e o funcionamento das For√ßas Armadas brasileiras, constitu√≠das pela Marinha, pelo Ex√©rcito e pela Aeron√°utica."],
        ["De acordo com o Estatuto dos Militares, as For√ßas Armadas do Brasil operam sob a autoridade suprema do Presidente da Rep√∫blica, seguindo os princ√≠pios da hierarquia e da disciplina, com a miss√£o de defender a P√°tria e garantir a lei e a ordem."],
        ["Segundo o Estatuto dos Militares, a carreira √© privativa do pessoal da ativa das For√ßas Armadas e inicia-se com o ingresso na Marinha, no Ex√©rcito ou na Aeron√°utica, obedecendo √†s diversas sequ√™ncias de graus hier√°rquicos."]
    ],
    'ground_truth': [
    "O presente Estatuto regula a situa√ß√£o, obriga√ß√µes, deveres, direitos e prerrogativas dos membros das For√ßas Armadas.",
    "As For√ßas Armadas, sob a autoridade suprema do Presidente da Rep√∫blica, destinam-se a defender a P√°tria e garantir os poderes constitu√≠dos, a lei e a ordem.",
    "A carreira militar √© caracterizada por atividade continuada e inteiramente devotada √†s finalidades prec√≠puas das For√ßas Armadas, denominada atividade militar."
    ]
    }
    dataset = Dataset.from_dict(data_samples)
    score = evaluate(dataset,metrics=[faithfulness, answer_relevancy, context_precision, context_recall, answer_similarity, answer_correctness])
    score.to_pandas()
    st.table(data=score)

    # predictions = ["In Dungeons & Dragons, the metallic dragons come in brass, bronze, copper, gold, and silver varieties. Each has scales in hues matching their name - brass dragons have brassy scales, bronze have bronze scales, etc. The metallic dragons are generally more benign than the chromatic dragons in D&D lore."]


    # references =["""The five basic chromatic dragons (red, blue, green, black, and white) and metallic dragons (copper, brass, silver, gold, and bronze) appeared in the fifth edition Monster Manual (2014) in wyrmling, young, adult, and ancient. Gem dragons and other new-to-fifth-edition dragons appeared in Fizban's Treasury of Dragons (2021)"""]
    
    # rouge = evaluate.load('rouge')
    # results_rouge = rouge.compute(predictions=predictions, references=references, use_aggregator=False)
    # df_rouge = pd.DataFrame.from_dict(results_rouge)
    # st.table(df_rouge)
    # bleu = evaluate.load('bleu')
    
    # results_bleu = bleu.compute(predictions=predictions, references=references,max_order=4)
    # df_results_bleu = pd.DataFrame.from_dict(results_bleu)
    # st.table(df_results_bleu)
#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
#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
    
if __name__ == '__main__':
    main()
    
